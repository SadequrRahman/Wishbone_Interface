
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.10.3.144

// ldbanno -n Verilog -o pico_i2c_i2c_interface_vo.vo -w -neg -gui -msgset D:/WorkingDir/Fpga/pico_dev_test/promote.xml pico_i2c_i2c_interface.ncd 
// Netlist created on Tue Aug 27 13:33:02 2019
// Netlist written on Tue Aug 27 13:33:51 2019
// Design is for device LCMXO2-1200ZE
// Design is for package TQFP144
// Design is for performance grade 1

`timescale 1 ns / 1 ps

module top_module ( rst_n, scl, sda, usb_osc, enI2C, heart_beat );
  input  rst_n, usb_osc;
  output enI2C, heart_beat;
  inout  scl, sda;
  wire   \HeartBeatInst0/iCounter[0] , \HeartBeatInst0/iCounter_s[0] , 
         \wb_manager0/nState[3] , sys_clk_0, \wb_manager0/cState[3] , 
         \HeartBeatInst0/iCounter_cry[0] , heart_beat_c, 
         \HeartBeatInst0/iCounter[19] , \HeartBeatInst0/iCounter_s[20] , 
         \HeartBeatInst0/iCounter_s[19] , \HeartBeatInst0/iCounter_cry[18] , 
         \HeartBeatInst0/iCounter[18] , \HeartBeatInst0/iCounter[17] , 
         \HeartBeatInst0/iCounter_s[18] , \HeartBeatInst0/iCounter_s[17] , 
         \HeartBeatInst0/iCounter_cry[16] , \HeartBeatInst0/iCounter[16] , 
         \HeartBeatInst0/iCounter[15] , \HeartBeatInst0/iCounter_s[16] , 
         \HeartBeatInst0/iCounter_s[15] , \HeartBeatInst0/iCounter_cry[14] , 
         \HeartBeatInst0/iCounter[14] , \HeartBeatInst0/iCounter[13] , 
         \HeartBeatInst0/iCounter_s[14] , \HeartBeatInst0/iCounter_s[13] , 
         \HeartBeatInst0/iCounter_cry[12] , \HeartBeatInst0/iCounter[12] , 
         \HeartBeatInst0/iCounter[11] , \HeartBeatInst0/iCounter_s[12] , 
         \HeartBeatInst0/iCounter_s[11] , \HeartBeatInst0/iCounter_cry[10] , 
         \HeartBeatInst0/iCounter[10] , \HeartBeatInst0/iCounter[9] , 
         \HeartBeatInst0/iCounter_s[10] , \HeartBeatInst0/iCounter_s[9] , 
         \HeartBeatInst0/iCounter_cry[8] , \HeartBeatInst0/iCounter[8] , 
         \HeartBeatInst0/iCounter[7] , \HeartBeatInst0/iCounter_s[8] , 
         \HeartBeatInst0/iCounter_s[7] , \HeartBeatInst0/iCounter_cry[6] , 
         \HeartBeatInst0/iCounter[6] , \HeartBeatInst0/iCounter[5] , 
         \HeartBeatInst0/iCounter_s[6] , \HeartBeatInst0/iCounter_s[5] , 
         \HeartBeatInst0/iCounter_cry[4] , \HeartBeatInst0/iCounter[4] , 
         \HeartBeatInst0/iCounter[3] , \HeartBeatInst0/iCounter_s[4] , 
         \HeartBeatInst0/iCounter_s[3] , \HeartBeatInst0/iCounter_cry[2] , 
         \HeartBeatInst0/iCounter[2] , \HeartBeatInst0/iCounter[1] , 
         \HeartBeatInst0/iCounter_s[2] , \HeartBeatInst0/iCounter_s[1] , 
         \main.un6[0] , \main.un6_i[0] , \status_reg_1_RNI75G51[5] , 
         \addr_i[0] , \addr_i[2] , \wb_manager0.cState[1] , rst_n_c, 
         \wb_manager0.status_reg_1_i[5] , \addr_i[6] , N_52_0, \main.un6[1] , 
         \main.un6[2] , \data_io_0[6] , \data_io_1[4] , \data_io[4] , 
         \data_io[6] , \main.un3_i , \wb_manager0/cState[4] , 
         \wb_manager0/nState_1_sqmuxa_2_i , \wb_manager0/nState[2] , 
         \wb_manager0/cState[5] , \wb_manager0/cState[2] , 
         \wb_manager0/wb_adr_i[6] , \wb_manager0/nState[5] , VCC, 
         \wb_manager0/nState[1] , \wb_manager0/wb_dat_i[6] , 
         \wb_manager0/wb_adr_i[0] , \wb_manager0/wb_dat_i[4] , 
         \wb_manager0/wb_adr_i[2] , \wb_manager0/wb_ack_o , 
         \wb_manager0/N_51_i , \wb_manager0/nState[4] , 
         \wb_manager0/efb_i2c_Inst0/i2c1_scli , 
         \wb_manager0/efb_i2c_Inst0/i2c1_scloen , 
         \wb_manager0/efb_i2c_Inst0/i2c1_sclo , 
         \wb_manager0/efb_i2c_Inst0/i2c1_sdai , 
         \wb_manager0/efb_i2c_Inst0/i2c1_sdaoen , 
         \wb_manager0/efb_i2c_Inst0/i2c1_sdao , VCCI;

  SLICE_0 SLICE_0( .A1(\HeartBeatInst0/iCounter[0] ), 
    .DI1(\HeartBeatInst0/iCounter_s[0] ), .M0(\wb_manager0/nState[3] ), 
    .CLK(sys_clk_0), .Q0(\wb_manager0/cState[3] ), 
    .F1(\HeartBeatInst0/iCounter_s[0] ), .Q1(\HeartBeatInst0/iCounter[0] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[0] ));
  HeartBeatInst0_SLICE_1 \HeartBeatInst0/SLICE_1 ( .A1(heart_beat_c), 
    .A0(\HeartBeatInst0/iCounter[19] ), .DI1(\HeartBeatInst0/iCounter_s[20] ), 
    .DI0(\HeartBeatInst0/iCounter_s[19] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[18] ), 
    .F0(\HeartBeatInst0/iCounter_s[19] ), .Q0(\HeartBeatInst0/iCounter[19] ), 
    .F1(\HeartBeatInst0/iCounter_s[20] ), .Q1(heart_beat_c));
  HeartBeatInst0_SLICE_2 \HeartBeatInst0/SLICE_2 ( 
    .A1(\HeartBeatInst0/iCounter[18] ), .A0(\HeartBeatInst0/iCounter[17] ), 
    .DI1(\HeartBeatInst0/iCounter_s[18] ), 
    .DI0(\HeartBeatInst0/iCounter_s[17] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[16] ), 
    .F0(\HeartBeatInst0/iCounter_s[17] ), .Q0(\HeartBeatInst0/iCounter[17] ), 
    .F1(\HeartBeatInst0/iCounter_s[18] ), .Q1(\HeartBeatInst0/iCounter[18] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[18] ));
  HeartBeatInst0_SLICE_3 \HeartBeatInst0/SLICE_3 ( 
    .A1(\HeartBeatInst0/iCounter[16] ), .A0(\HeartBeatInst0/iCounter[15] ), 
    .DI1(\HeartBeatInst0/iCounter_s[16] ), 
    .DI0(\HeartBeatInst0/iCounter_s[15] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[14] ), 
    .F0(\HeartBeatInst0/iCounter_s[15] ), .Q0(\HeartBeatInst0/iCounter[15] ), 
    .F1(\HeartBeatInst0/iCounter_s[16] ), .Q1(\HeartBeatInst0/iCounter[16] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[16] ));
  HeartBeatInst0_SLICE_4 \HeartBeatInst0/SLICE_4 ( 
    .A1(\HeartBeatInst0/iCounter[14] ), .A0(\HeartBeatInst0/iCounter[13] ), 
    .DI1(\HeartBeatInst0/iCounter_s[14] ), 
    .DI0(\HeartBeatInst0/iCounter_s[13] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[12] ), 
    .F0(\HeartBeatInst0/iCounter_s[13] ), .Q0(\HeartBeatInst0/iCounter[13] ), 
    .F1(\HeartBeatInst0/iCounter_s[14] ), .Q1(\HeartBeatInst0/iCounter[14] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[14] ));
  HeartBeatInst0_SLICE_5 \HeartBeatInst0/SLICE_5 ( 
    .A1(\HeartBeatInst0/iCounter[12] ), .A0(\HeartBeatInst0/iCounter[11] ), 
    .DI1(\HeartBeatInst0/iCounter_s[12] ), 
    .DI0(\HeartBeatInst0/iCounter_s[11] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[10] ), 
    .F0(\HeartBeatInst0/iCounter_s[11] ), .Q0(\HeartBeatInst0/iCounter[11] ), 
    .F1(\HeartBeatInst0/iCounter_s[12] ), .Q1(\HeartBeatInst0/iCounter[12] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[12] ));
  HeartBeatInst0_SLICE_6 \HeartBeatInst0/SLICE_6 ( 
    .A1(\HeartBeatInst0/iCounter[10] ), .A0(\HeartBeatInst0/iCounter[9] ), 
    .DI1(\HeartBeatInst0/iCounter_s[10] ), 
    .DI0(\HeartBeatInst0/iCounter_s[9] ), .CLK(sys_clk_0), 
    .FCI(\HeartBeatInst0/iCounter_cry[8] ), 
    .F0(\HeartBeatInst0/iCounter_s[9] ), .Q0(\HeartBeatInst0/iCounter[9] ), 
    .F1(\HeartBeatInst0/iCounter_s[10] ), .Q1(\HeartBeatInst0/iCounter[10] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[10] ));
  HeartBeatInst0_SLICE_7 \HeartBeatInst0/SLICE_7 ( 
    .A1(\HeartBeatInst0/iCounter[8] ), .A0(\HeartBeatInst0/iCounter[7] ), 
    .DI1(\HeartBeatInst0/iCounter_s[8] ), .DI0(\HeartBeatInst0/iCounter_s[7] ), 
    .CLK(sys_clk_0), .FCI(\HeartBeatInst0/iCounter_cry[6] ), 
    .F0(\HeartBeatInst0/iCounter_s[7] ), .Q0(\HeartBeatInst0/iCounter[7] ), 
    .F1(\HeartBeatInst0/iCounter_s[8] ), .Q1(\HeartBeatInst0/iCounter[8] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[8] ));
  HeartBeatInst0_SLICE_8 \HeartBeatInst0/SLICE_8 ( 
    .A1(\HeartBeatInst0/iCounter[6] ), .A0(\HeartBeatInst0/iCounter[5] ), 
    .DI1(\HeartBeatInst0/iCounter_s[6] ), .DI0(\HeartBeatInst0/iCounter_s[5] ), 
    .CLK(sys_clk_0), .FCI(\HeartBeatInst0/iCounter_cry[4] ), 
    .F0(\HeartBeatInst0/iCounter_s[5] ), .Q0(\HeartBeatInst0/iCounter[5] ), 
    .F1(\HeartBeatInst0/iCounter_s[6] ), .Q1(\HeartBeatInst0/iCounter[6] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[6] ));
  HeartBeatInst0_SLICE_9 \HeartBeatInst0/SLICE_9 ( 
    .A1(\HeartBeatInst0/iCounter[4] ), .A0(\HeartBeatInst0/iCounter[3] ), 
    .DI1(\HeartBeatInst0/iCounter_s[4] ), .DI0(\HeartBeatInst0/iCounter_s[3] ), 
    .CLK(sys_clk_0), .FCI(\HeartBeatInst0/iCounter_cry[2] ), 
    .F0(\HeartBeatInst0/iCounter_s[3] ), .Q0(\HeartBeatInst0/iCounter[3] ), 
    .F1(\HeartBeatInst0/iCounter_s[4] ), .Q1(\HeartBeatInst0/iCounter[4] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[4] ));
  HeartBeatInst0_SLICE_10 \HeartBeatInst0/SLICE_10 ( 
    .A1(\HeartBeatInst0/iCounter[2] ), .A0(\HeartBeatInst0/iCounter[1] ), 
    .DI1(\HeartBeatInst0/iCounter_s[2] ), .DI0(\HeartBeatInst0/iCounter_s[1] ), 
    .CLK(sys_clk_0), .FCI(\HeartBeatInst0/iCounter_cry[0] ), 
    .F0(\HeartBeatInst0/iCounter_s[1] ), .Q0(\HeartBeatInst0/iCounter[1] ), 
    .F1(\HeartBeatInst0/iCounter_s[2] ), .Q1(\HeartBeatInst0/iCounter[2] ), 
    .FCO(\HeartBeatInst0/iCounter_cry[2] ));
  SLICE_11 SLICE_11( .D0(\main.un6[0] ), .DI0(\main.un6_i[0] ), 
    .M1(\main.un6[0] ), .CE(\status_reg_1_RNI75G51[5] ), .CLK(sys_clk_0), 
    .F0(\main.un6_i[0] ), .Q0(\addr_i[0] ), .Q1(\addr_i[2] ));
  SLICE_12 SLICE_12( .C1(\wb_manager0.cState[1] ), .B1(rst_n_c), 
    .A1(\wb_manager0.status_reg_1_i[5] ), .D0(\wb_manager0.status_reg_1_i[5] ), 
    .C0(\wb_manager0.cState[1] ), .B0(rst_n_c), .A0(\addr_i[6] ), .DI0(N_52_0), 
    .CLK(sys_clk_0), .F0(N_52_0), .Q0(\addr_i[6] ), 
    .F1(\status_reg_1_RNI75G51[5] ));
  SLICE_13 SLICE_13( .C1(\main.un6[1] ), .A1(\main.un6[0] ), 
    .C0(\main.un6[2] ), .A0(\main.un6[0] ), .DI1(\data_io_0[6] ), 
    .DI0(\data_io_1[4] ), .CE(\status_reg_1_RNI75G51[5] ), .CLK(sys_clk_0), 
    .F0(\data_io_1[4] ), .Q0(\data_io[4] ), .F1(\data_io_0[6] ), 
    .Q1(\data_io[6] ));
  SLICE_15 SLICE_15( .B0(\main.un6[1] ), .A0(\main.un6[2] ), 
    .DI0(\main.un3_i ), .M1(\main.un6[1] ), .CE(\status_reg_1_RNI75G51[5] ), 
    .CLK(sys_clk_0), .F0(\main.un3_i ), .Q0(\main.un6[2] ), .Q1(\main.un6[0] ));
  wb_manager0_SLICE_21 \wb_manager0/SLICE_21 ( .M1(\wb_manager0/cState[3] ), 
    .M0(\wb_manager0/cState[4] ), .CLK(\wb_manager0/nState_1_sqmuxa_2_i ), 
    .Q0(\wb_manager0/nState[3] ), .Q1(\wb_manager0/nState[2] ));
  SLICE_22 SLICE_22( .D0(\wb_manager0.cState[1] ), .C0(\addr_i[6] ), 
    .A0(\wb_manager0/cState[5] ), .M1(\wb_manager0/cState[2] ), 
    .M0(\wb_manager0.cState[1] ), .CLK(\wb_manager0/nState_1_sqmuxa_2_i ), 
    .F0(\wb_manager0/wb_adr_i[6] ), .Q0(\wb_manager0/nState[5] ), .F1(VCC), 
    .Q1(\wb_manager0/nState[1] ));
  wb_manager0_SLICE_23 \wb_manager0/SLICE_23 ( .C1(\addr_i[0] ), 
    .B1(\wb_manager0/cState[5] ), .A1(\wb_manager0.cState[1] ), 
    .D0(\data_io[6] ), .C0(\wb_manager0/cState[5] ), 
    .A0(\wb_manager0.cState[1] ), .M1(\wb_manager0/nState[2] ), 
    .M0(\wb_manager0/nState[1] ), .CLK(sys_clk_0), 
    .F0(\wb_manager0/wb_dat_i[6] ), .Q0(\wb_manager0.cState[1] ), 
    .F1(\wb_manager0/wb_adr_i[0] ), .Q1(\wb_manager0/cState[2] ));
  wb_manager0_SLICE_24 \wb_manager0/SLICE_24 ( .D1(\addr_i[2] ), 
    .B1(\wb_manager0.cState[1] ), .A1(\wb_manager0/cState[5] ), 
    .D0(\data_io[4] ), .B0(\wb_manager0.cState[1] ), 
    .A0(\wb_manager0/cState[5] ), .M0(\wb_manager0.cState[1] ), .CE(rst_n_c), 
    .CLK(sys_clk_0), .F0(\wb_manager0/wb_dat_i[4] ), 
    .Q0(\wb_manager0.status_reg_1_i[5] ), .F1(\wb_manager0/wb_adr_i[2] ));
  SLICE_25 SLICE_25( .D1(\wb_manager0/cState[2] ), .C1(\wb_manager0/wb_ack_o ), 
    .D0(\wb_manager0/cState[2] ), .C0(\wb_manager0/cState[3] ), 
    .M0(\main.un6[2] ), .CE(\status_reg_1_RNI75G51[5] ), .CLK(sys_clk_0), 
    .F0(\wb_manager0/N_51_i ), .Q0(\main.un6[1] ), 
    .F1(\wb_manager0/nState_1_sqmuxa_2_i ));
  wb_manager0_SLICE_28 \wb_manager0/SLICE_28 ( .M1(\wb_manager0/nState[4] ), 
    .M0(\wb_manager0/nState[5] ), .CLK(sys_clk_0), 
    .Q0(\wb_manager0/cState[5] ), .Q1(\wb_manager0/cState[4] ));
  wb_manager0_SLICE_30 \wb_manager0/SLICE_30 ( .M0(\wb_manager0/cState[5] ), 
    .CLK(\wb_manager0/nState_1_sqmuxa_2_i ), .Q0(\wb_manager0/nState[4] ));
  enI2C enI2C_I( .PADDO(VCC), .enI2C(enI2C));
  rst_n rst_n_I( .PADDI(rst_n_c), .rst_n(rst_n));
  scl scl_I( .PADDI(\wb_manager0/efb_i2c_Inst0/i2c1_scli ), 
    .PADDT(\wb_manager0/efb_i2c_Inst0/i2c1_scloen ), 
    .PADDO(\wb_manager0/efb_i2c_Inst0/i2c1_sclo ), .scl(scl));
  sda sda_I( .PADDI(\wb_manager0/efb_i2c_Inst0/i2c1_sdai ), 
    .PADDT(\wb_manager0/efb_i2c_Inst0/i2c1_sdaoen ), 
    .PADDO(\wb_manager0/efb_i2c_Inst0/i2c1_sdao ), .sda(sda));
  heart_beat heart_beat_I( .PADDO(heart_beat_c), .heart_beat(heart_beat));
  OSCInst0 OSCInst0( .OSC(sys_clk_0));
  wb_manager0_efb_i2c_Inst0_EFBInst_0 \wb_manager0/efb_i2c_Inst0/EFBInst_0 ( 
    .WBCLKI(sys_clk_0), .WBRSTI(rst_n_c), .WBCYCI(\wb_manager0/N_51_i ), 
    .WBSTBI(\wb_manager0/N_51_i ), .WBWEI(\wb_manager0/cState[3] ), 
    .WBADRI0(\wb_manager0/wb_adr_i[0] ), .WBADRI2(\wb_manager0/wb_adr_i[2] ), 
    .WBADRI6(\wb_manager0/wb_adr_i[6] ), .WBDATI1(\wb_manager0/wb_adr_i[2] ), 
    .WBDATI2(\wb_manager0/wb_adr_i[0] ), .WBDATI3(\wb_manager0/wb_adr_i[2] ), 
    .WBDATI4(\wb_manager0/wb_dat_i[4] ), .WBDATI6(\wb_manager0/wb_dat_i[6] ), 
    .WBDATI7(\wb_manager0/wb_dat_i[4] ), .WBACKO(\wb_manager0/wb_ack_o ), 
    .I2C1SDAOEN(\wb_manager0/efb_i2c_Inst0/i2c1_sdaoen ), 
    .I2C1SDAO(\wb_manager0/efb_i2c_Inst0/i2c1_sdao ), 
    .I2C1SDAI(\wb_manager0/efb_i2c_Inst0/i2c1_sdai ), 
    .I2C1SCLOEN(\wb_manager0/efb_i2c_Inst0/i2c1_scloen ), 
    .I2C1SCLO(\wb_manager0/efb_i2c_Inst0/i2c1_sclo ), 
    .I2C1SCLI(\wb_manager0/efb_i2c_Inst0/i2c1_scli ));
  GSR_INST GSR_INST( .GSRNET(rst_n_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input A1, DI1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, M0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \wb_manager0/cState[3] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \HeartBeatInst0/iCounter_cry_0[0] ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module HeartBeatInst0_SLICE_1 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \HeartBeatInst0/iCounter_cry_0[19] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5002;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module HeartBeatInst0_SLICE_2 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[17] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module HeartBeatInst0_SLICE_3 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[15] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_4 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[13] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_5 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[11] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_6 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[9] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_7 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[7] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_8 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[5] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_9 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[3] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module HeartBeatInst0_SLICE_10 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \HeartBeatInst0/iCounter[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \HeartBeatInst0/iCounter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \HeartBeatInst0/iCounter_cry_0[1] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input D0, DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut4 \addr_i_RNO[0] ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \addr_i[2] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \addr_i[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0003 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_12 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40004 \wb_manager0/status_reg_1_RNI75G51[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 \addr_i_RNO[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0003 \addr_i[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_13 ( input C1, A1, C0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 \data_io_0[6] ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \data_io_1[4] ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0003 \data_io[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \data_io[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_15 ( input B0, A0, DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40008 \main.un6_RNO[2] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \main.un6[0] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \main.un6[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module wb_manager0_SLICE_21 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0009 \wb_manager0/nState[2] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0009 \wb_manager0/nState[3] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0009 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1B INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_22 ( input D0, C0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40010 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 \wb_manager0/wb_adr_i[6] ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0009 \wb_manager0/nState[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0009 \wb_manager0/nState[5] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module wb_manager0_SLICE_23 ( input C1, B1, A1, D0, C0, A0, M1, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40012 \wb_manager0/wb_adr_i[0] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40013 \wb_manager0/wb_dat_i[6] ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \wb_manager0/cState[2] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \wb_manager0/cState[1] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module wb_manager0_SLICE_24 ( input D1, B1, A1, D0, B0, A0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40014 \wb_manager0/wb_adr_i[2] ( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40014 \wb_manager0/wb_dat_i[4] ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0003 \wb_manager0/status_reg_1[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_25 ( input D1, C1, D0, C0, M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40015 \wb_manager0/nState_1_sqmuxa_2_i ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \wb_manager0/cState_RNIVEMT[2] ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0003 \main.un6[1] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module wb_manager0_SLICE_28 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \wb_manager0/cState[4] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0017 \wb_manager0/cState[5] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0017 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module wb_manager0_SLICE_30 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0009 \wb_manager0/nState[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module enI2C ( input PADDO, output enI2C );
  wire   GNDI;

  xo2iobuf enI2C_pad( .I(PADDO), .T(GNDI), .PAD(enI2C));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => enI2C) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module rst_n ( output PADDI, input rst_n );

  xo2iobuf0018 rst_n_pad( .Z(PADDI), .PAD(rst_n));

  specify
    (rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst_n, 0:0:0);
    $width (negedge rst_n, 0:0:0);
  endspecify

endmodule

module xo2iobuf0018 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module scl ( output PADDI, input PADDT, PADDO, inout scl );

  xo2iobuf0019 \wb_manager0/efb_i2c_Inst0/BB1_scl ( .I(PADDO), .T(PADDT), 
    .Z(PADDI), .PAD(scl), .PADI(scl));

  specify
    (PADDT => scl) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => scl) = (0:0:0,0:0:0);
    (scl => PADDI) = (0:0:0,0:0:0);
    $width (posedge scl, 0:0:0);
    $width (negedge scl, 0:0:0);
  endspecify

endmodule

module xo2iobuf0019 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module sda ( output PADDI, input PADDT, PADDO, inout sda );

  xo2iobuf0019 \wb_manager0/efb_i2c_Inst0/BB1_sda ( .I(PADDO), .T(PADDT), 
    .Z(PADDI), .PAD(sda), .PADI(sda));

  specify
    (PADDT => sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => sda) = (0:0:0,0:0:0);
    (sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge sda, 0:0:0);
    $width (negedge sda, 0:0:0);
  endspecify

endmodule

module heart_beat ( input PADDO, output heart_beat );
  wire   GNDI;

  xo2iobuf heart_beat_pad( .I(PADDO), .T(GNDI), .PAD(heart_beat));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => heart_beat) = (0:0:0,0:0:0);
  endspecify

endmodule

module OSCInst0 ( output OSC );
  wire   GNDI;

  OSCH_B OSCInst0_OSCH( .STDBY(GNDI), .OSC(OSC), .SEDSTDBY());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module OSCH_B ( input STDBY, output OSC, SEDSTDBY );

  OSCH INST10( .STDBY(STDBY), .OSC(OSC), .SEDSTDBY(SEDSTDBY));
  defparam INST10.NOM_FREQ = "133.00";
endmodule

module wb_manager0_efb_i2c_Inst0_EFBInst_0 ( input WBCLKI, WBRSTI, WBCYCI, 
    WBSTBI, WBWEI, WBADRI0, WBADRI2, WBADRI6, WBDATI1, WBDATI2, WBDATI3, 
    WBDATI4, WBDATI6, WBDATI7, output WBACKO, I2C1SDAOEN, I2C1SDAO, input 
    I2C1SDAI, output I2C1SCLOEN, I2C1SCLO, input I2C1SCLI );
  wire   WBRSTI_NOTIN, GNDI, VCCI;

  EFB_B \wb_manager0/efb_i2c_Inst0/EFBInst_0_EFB ( .WBCLKI(WBCLKI), 
    .WBRSTI(WBRSTI_NOTIN), .WBCYCI(WBCYCI), .WBSTBI(WBSTBI), .WBWEI(WBWEI), 
    .WBADRI0(WBADRI0), .WBADRI1(GNDI), .WBADRI2(WBADRI2), .WBADRI3(GNDI), 
    .WBADRI4(GNDI), .WBADRI5(GNDI), .WBADRI6(WBADRI6), .WBADRI7(GNDI), 
    .WBDATI0(GNDI), .WBDATI1(WBDATI1), .WBDATI2(WBDATI2), .WBDATI3(WBDATI3), 
    .WBDATI4(WBDATI4), .WBDATI5(GNDI), .WBDATI6(WBDATI6), .WBDATI7(WBDATI7), 
    .WBDATO0(), .WBDATO1(), .WBDATO2(), .WBDATO3(), .WBDATO4(), .WBDATO5(), 
    .WBDATO6(), .WBDATO7(), .WBACKO(WBACKO), .WBCUFMIRQ(), .UFMSN(VCCI), 
    .CFGWAKE(), .CFGSTDBY(), .I2C1SCLI(I2C1SCLI), .I2C1SCLO(I2C1SCLO), 
    .I2C1SCLOEN(I2C1SCLOEN), .I2C1SDAI(I2C1SDAI), .I2C1SDAO(I2C1SDAO), 
    .I2C1SDAOEN(I2C1SDAOEN), .I2C2SCLI(GNDI), .I2C2SCLO(), .I2C2SCLOEN(), 
    .I2C2SDAI(GNDI), .I2C2SDAO(), .I2C2SDAOEN(), .I2C1IRQO(), .I2C2IRQO(), 
    .SPISCKI(GNDI), .SPISCKO(), .SPISCKEN(), .SPIMISOI(GNDI), .SPIMISOO(), 
    .SPIMISOEN(), .SPIMOSII(GNDI), .SPIMOSIO(), .SPIMOSIEN(), .SPIMCSN0(), 
    .SPIMCSN1(), .SPIMCSN2(), .SPIMCSN3(), .SPIMCSN4(), .SPIMCSN5(), 
    .SPIMCSN6(), .SPIMCSN7(), .SPICSNEN(), .SPISCSN(GNDI), .SPIIRQO(), 
    .TCCLKI(GNDI), .TCRSTN(GNDI), .TCIC(GNDI), .TCINT(), .TCOC(), .PLLCLKO(), 
    .PLLRSTO(), .PLL0STBO(), .PLL1STBO(), .PLLWEO(), .PLLADRO0(), .PLLADRO1(), 
    .PLLADRO2(), .PLLADRO3(), .PLLADRO4(), .PLLDATO0(), .PLLDATO1(), 
    .PLLDATO2(), .PLLDATO3(), .PLLDATO4(), .PLLDATO5(), .PLLDATO6(), 
    .PLLDATO7(), .PLL0DATI0(GNDI), .PLL0DATI1(GNDI), .PLL0DATI2(GNDI), 
    .PLL0DATI3(GNDI), .PLL0DATI4(GNDI), .PLL0DATI5(GNDI), .PLL0DATI6(GNDI), 
    .PLL0DATI7(GNDI), .PLL0ACKI(GNDI), .PLL1DATI0(GNDI), .PLL1DATI1(GNDI), 
    .PLL1DATI2(GNDI), .PLL1DATI3(GNDI), .PLL1DATI4(GNDI), .PLL1DATI5(GNDI), 
    .PLL1DATI6(GNDI), .PLL1DATI7(GNDI), .PLL1ACKI(GNDI));
  inverter WBRSTI_INVERTERIN( .I(WBRSTI), .Z(WBRSTI_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
endmodule

module EFB_B ( input WBCLKI, WBRSTI, WBCYCI, WBSTBI, WBWEI, WBADRI0, WBADRI1, 
    WBADRI2, WBADRI3, WBADRI4, WBADRI5, WBADRI6, WBADRI7, WBDATI0, WBDATI1, 
    WBDATI2, WBDATI3, WBDATI4, WBDATI5, WBDATI6, WBDATI7, output WBDATO0, 
    WBDATO1, WBDATO2, WBDATO3, WBDATO4, WBDATO5, WBDATO6, WBDATO7, WBACKO, 
    WBCUFMIRQ, input UFMSN, output CFGWAKE, CFGSTDBY, input I2C1SCLI, output 
    I2C1SCLO, I2C1SCLOEN, input I2C1SDAI, output I2C1SDAO, I2C1SDAOEN, input 
    I2C2SCLI, output I2C2SCLO, I2C2SCLOEN, input I2C2SDAI, output I2C2SDAO, 
    I2C2SDAOEN, I2C1IRQO, I2C2IRQO, input SPISCKI, output SPISCKO, SPISCKEN, 
    input SPIMISOI, output SPIMISOO, SPIMISOEN, input SPIMOSII, output 
    SPIMOSIO, SPIMOSIEN, SPIMCSN0, SPIMCSN1, SPIMCSN2, SPIMCSN3, SPIMCSN4, 
    SPIMCSN5, SPIMCSN6, SPIMCSN7, SPICSNEN, input SPISCSN, output SPIIRQO, 
    input TCCLKI, TCRSTN, TCIC, output TCINT, TCOC, PLLCLKO, PLLRSTO, PLL0STBO, 
    PLL1STBO, PLLWEO, PLLADRO0, PLLADRO1, PLLADRO2, PLLADRO3, PLLADRO4, 
    PLLDATO0, PLLDATO1, PLLDATO2, PLLDATO3, PLLDATO4, PLLDATO5, PLLDATO6, 
    PLLDATO7, input PLL0DATI0, PLL0DATI1, PLL0DATI2, PLL0DATI3, PLL0DATI4, 
    PLL0DATI5, PLL0DATI6, PLL0DATI7, PLL0ACKI, PLL1DATI0, PLL1DATI1, PLL1DATI2, 
    PLL1DATI3, PLL1DATI4, PLL1DATI5, PLL1DATI6, PLL1DATI7, PLL1ACKI );
  wire   WBCLKI_buf, WBRSTI_buf, WBCYCI_buf, WBSTBI_buf, WBWEI_buf, 
         WBADRI7_buf, WBADRI6_buf, WBADRI5_buf, WBADRI4_buf, WBADRI3_buf, 
         WBADRI2_buf, WBADRI1_buf, WBADRI0_buf, WBDATI7_buf, WBDATI6_buf, 
         WBDATI5_buf, WBDATI4_buf, WBDATI3_buf, WBDATI2_buf, WBDATI1_buf, 
         WBDATI0_buf, PLL0DATI7_buf, PLL0DATI6_buf, PLL0DATI5_buf, 
         PLL0DATI4_buf, PLL0DATI3_buf, PLL0DATI2_buf, PLL0DATI1_buf, 
         PLL0DATI0_buf, PLL0ACKI_buf, PLL1DATI7_buf, PLL1DATI6_buf, 
         PLL1DATI5_buf, PLL1DATI4_buf, PLL1DATI3_buf, PLL1DATI2_buf, 
         PLL1DATI1_buf, PLL1DATI0_buf, PLL1ACKI_buf, I2C1SCLI_buf, 
         I2C1SDAI_buf, I2C2SCLI_buf, I2C2SDAI_buf, SPISCKI_buf, SPIMISOI_buf, 
         SPIMOSII_buf, SPISCSN_buf, TCCLKI_buf, TCRSTN_buf, TCIC_buf, 
         UFMSN_buf, WBDATO7_buf, WBDATO6_buf, WBDATO5_buf, WBDATO4_buf, 
         WBDATO3_buf, WBDATO2_buf, WBDATO1_buf, WBDATO0_buf, WBACKO_buf, 
         PLLCLKO_buf, PLLRSTO_buf, PLL0STBO_buf, PLL1STBO_buf, PLLWEO_buf, 
         PLLADRO4_buf, PLLADRO3_buf, PLLADRO2_buf, PLLADRO1_buf, PLLADRO0_buf, 
         PLLDATO7_buf, PLLDATO6_buf, PLLDATO5_buf, PLLDATO4_buf, PLLDATO3_buf, 
         PLLDATO2_buf, PLLDATO1_buf, PLLDATO0_buf, I2C1SCLO_buf, 
         I2C1SCLOEN_buf, I2C1SDAO_buf, I2C1SDAOEN_buf, I2C2SCLO_buf, 
         I2C2SCLOEN_buf, I2C2SDAO_buf, I2C2SDAOEN_buf, I2C1IRQO_buf, 
         I2C2IRQO_buf, SPISCKO_buf, SPISCKEN_buf, SPIMISOO_buf, SPIMISOEN_buf, 
         SPIMOSIO_buf, SPIMOSIEN_buf, SPIMCSN0_buf, SPIMCSN1_buf, SPIMCSN2_buf, 
         SPIMCSN3_buf, SPIMCSN4_buf, SPIMCSN5_buf, SPIMCSN6_buf, SPIMCSN7_buf, 
         SPICSNEN_buf, SPIIRQO_buf, TCINT_buf, TCOC_buf, WBCUFMIRQ_buf, 
         CFGWAKE_buf, CFGSTDBY_buf;

  EFB INST10( .WBCLKI(WBCLKI_buf), .WBRSTI(WBRSTI_buf), .WBCYCI(WBCYCI_buf), 
    .WBSTBI(WBSTBI_buf), .WBWEI(WBWEI_buf), .WBADRI7(WBADRI7_buf), 
    .WBADRI6(WBADRI6_buf), .WBADRI5(WBADRI5_buf), .WBADRI4(WBADRI4_buf), 
    .WBADRI3(WBADRI3_buf), .WBADRI2(WBADRI2_buf), .WBADRI1(WBADRI1_buf), 
    .WBADRI0(WBADRI0_buf), .WBDATI7(WBDATI7_buf), .WBDATI6(WBDATI6_buf), 
    .WBDATI5(WBDATI5_buf), .WBDATI4(WBDATI4_buf), .WBDATI3(WBDATI3_buf), 
    .WBDATI2(WBDATI2_buf), .WBDATI1(WBDATI1_buf), .WBDATI0(WBDATI0_buf), 
    .PLL0DATI7(PLL0DATI7_buf), .PLL0DATI6(PLL0DATI6_buf), 
    .PLL0DATI5(PLL0DATI5_buf), .PLL0DATI4(PLL0DATI4_buf), 
    .PLL0DATI3(PLL0DATI3_buf), .PLL0DATI2(PLL0DATI2_buf), 
    .PLL0DATI1(PLL0DATI1_buf), .PLL0DATI0(PLL0DATI0_buf), 
    .PLL0ACKI(PLL0ACKI_buf), .PLL1DATI7(PLL1DATI7_buf), 
    .PLL1DATI6(PLL1DATI6_buf), .PLL1DATI5(PLL1DATI5_buf), 
    .PLL1DATI4(PLL1DATI4_buf), .PLL1DATI3(PLL1DATI3_buf), 
    .PLL1DATI2(PLL1DATI2_buf), .PLL1DATI1(PLL1DATI1_buf), 
    .PLL1DATI0(PLL1DATI0_buf), .PLL1ACKI(PLL1ACKI_buf), 
    .I2C1SCLI(I2C1SCLI_buf), .I2C1SDAI(I2C1SDAI_buf), .I2C2SCLI(I2C2SCLI_buf), 
    .I2C2SDAI(I2C2SDAI_buf), .SPISCKI(SPISCKI_buf), .SPIMISOI(SPIMISOI_buf), 
    .SPIMOSII(SPIMOSII_buf), .SPISCSN(SPISCSN_buf), .TCCLKI(TCCLKI_buf), 
    .TCRSTN(TCRSTN_buf), .TCIC(TCIC_buf), .UFMSN(UFMSN_buf), 
    .WBDATO7(WBDATO7_buf), .WBDATO6(WBDATO6_buf), .WBDATO5(WBDATO5_buf), 
    .WBDATO4(WBDATO4_buf), .WBDATO3(WBDATO3_buf), .WBDATO2(WBDATO2_buf), 
    .WBDATO1(WBDATO1_buf), .WBDATO0(WBDATO0_buf), .WBACKO(WBACKO_buf), 
    .PLLCLKO(PLLCLKO_buf), .PLLRSTO(PLLRSTO_buf), .PLL0STBO(PLL0STBO_buf), 
    .PLL1STBO(PLL1STBO_buf), .PLLWEO(PLLWEO_buf), .PLLADRO4(PLLADRO4_buf), 
    .PLLADRO3(PLLADRO3_buf), .PLLADRO2(PLLADRO2_buf), .PLLADRO1(PLLADRO1_buf), 
    .PLLADRO0(PLLADRO0_buf), .PLLDATO7(PLLDATO7_buf), .PLLDATO6(PLLDATO6_buf), 
    .PLLDATO5(PLLDATO5_buf), .PLLDATO4(PLLDATO4_buf), .PLLDATO3(PLLDATO3_buf), 
    .PLLDATO2(PLLDATO2_buf), .PLLDATO1(PLLDATO1_buf), .PLLDATO0(PLLDATO0_buf), 
    .I2C1SCLO(I2C1SCLO_buf), .I2C1SCLOEN(I2C1SCLOEN_buf), 
    .I2C1SDAO(I2C1SDAO_buf), .I2C1SDAOEN(I2C1SDAOEN_buf), 
    .I2C2SCLO(I2C2SCLO_buf), .I2C2SCLOEN(I2C2SCLOEN_buf), 
    .I2C2SDAO(I2C2SDAO_buf), .I2C2SDAOEN(I2C2SDAOEN_buf), 
    .I2C1IRQO(I2C1IRQO_buf), .I2C2IRQO(I2C2IRQO_buf), .SPISCKO(SPISCKO_buf), 
    .SPISCKEN(SPISCKEN_buf), .SPIMISOO(SPIMISOO_buf), 
    .SPIMISOEN(SPIMISOEN_buf), .SPIMOSIO(SPIMOSIO_buf), 
    .SPIMOSIEN(SPIMOSIEN_buf), .SPIMCSN0(SPIMCSN0_buf), 
    .SPIMCSN1(SPIMCSN1_buf), .SPIMCSN2(SPIMCSN2_buf), .SPIMCSN3(SPIMCSN3_buf), 
    .SPIMCSN4(SPIMCSN4_buf), .SPIMCSN5(SPIMCSN5_buf), .SPIMCSN6(SPIMCSN6_buf), 
    .SPIMCSN7(SPIMCSN7_buf), .SPICSNEN(SPICSNEN_buf), .SPIIRQO(SPIIRQO_buf), 
    .TCINT(TCINT_buf), .TCOC(TCOC_buf), .WBCUFMIRQ(WBCUFMIRQ_buf), 
    .CFGWAKE(CFGWAKE_buf), .CFGSTDBY(CFGSTDBY_buf));
  defparam INST10.DEV_DENSITY = "1200L";
  defparam INST10.EFB_I2C1 = "ENABLED";
  defparam INST10.EFB_I2C2 = "DISABLED";
  defparam INST10.EFB_SPI = "DISABLED";
  defparam INST10.EFB_TC = "DISABLED";
  defparam INST10.EFB_TC_PORTMODE = "WB";
  defparam INST10.EFB_UFM = "DISABLED";
  defparam INST10.EFB_WB_CLK_FREQ = "133.0";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.I2C1_ADDRESSING = "7BIT";
  defparam INST10.I2C1_BUS_PERF = "400kHz";
  defparam INST10.I2C1_CLK_DIVIDER = 84;
  defparam INST10.I2C1_GEN_CALL = "DISABLED";
  defparam INST10.I2C1_SLAVE_ADDR = "0b1000001";
  defparam INST10.I2C1_WAKEUP = "DISABLED";
  defparam INST10.I2C2_ADDRESSING = "7BIT";
  defparam INST10.I2C2_BUS_PERF = "100kHz";
  defparam INST10.I2C2_CLK_DIVIDER = 1;
  defparam INST10.I2C2_GEN_CALL = "DISABLED";
  defparam INST10.I2C2_SLAVE_ADDR = "0b1000001";
  defparam INST10.I2C2_WAKEUP = "DISABLED";
  defparam INST10.SPI_CLK_DIVIDER = 3;
  defparam INST10.SPI_CLK_INV = "DISABLED";
  defparam INST10.SPI_INTR_RXOVR = "DISABLED";
  defparam INST10.SPI_INTR_RXRDY = "DISABLED";
  defparam INST10.SPI_INTR_TXOVR = "DISABLED";
  defparam INST10.SPI_INTR_TXRDY = "DISABLED";
  defparam INST10.SPI_LSB_FIRST = "DISABLED";
  defparam INST10.SPI_MODE = "MASTER";
  defparam INST10.SPI_PHASE_ADJ = "DISABLED";
  defparam INST10.SPI_SLAVE_HANDSHAKE = "DISABLED";
  defparam INST10.SPI_WAKEUP = "DISABLED";
  defparam INST10.TC_CCLK_SEL = 1;
  defparam INST10.TC_ICAPTURE = "DISABLED";
  defparam INST10.TC_ICR_INT = "OFF";
  defparam INST10.TC_MODE = "CTCM";
  defparam INST10.TC_OCR_INT = "OFF";
  defparam INST10.TC_OCR_SET = 32767;
  defparam INST10.TC_OC_MODE = "TOGGLE";
  defparam INST10.TC_OVERFLOW = "DISABLED";
  defparam INST10.TC_OV_INT = "OFF";
  defparam INST10.TC_RESETN = "DISABLED";
  defparam INST10.TC_SCLK_SEL = "PCLOCK";
  defparam INST10.TC_TOP_SEL = "OFF";
  defparam INST10.TC_TOP_SET = 65535;
  defparam INST10.UFM_INIT_ALL_ZEROS = "ENABLED";
  defparam INST10.UFM_INIT_FILE_FORMAT = "HEX";
  defparam INST10.UFM_INIT_FILE_NAME = "NONE";
  defparam INST10.UFM_INIT_PAGES = 0;
  defparam INST10.UFM_INIT_START_PAGE = 0;
  EFB_Buffer_Block INST20( .WBCLKIin(WBCLKI), .WBCLKIout(WBCLKI_buf), 
    .WBRSTIin(WBRSTI), .WBRSTIout(WBRSTI_buf), .WBCYCIin(WBCYCI), 
    .WBCYCIout(WBCYCI_buf), .WBSTBIin(WBSTBI), .WBSTBIout(WBSTBI_buf), 
    .WBWEIin(WBWEI), .WBWEIout(WBWEI_buf), .WBADRI7in(WBADRI7), 
    .WBADRI7out(WBADRI7_buf), .WBADRI6in(WBADRI6), .WBADRI6out(WBADRI6_buf), 
    .WBADRI5in(WBADRI5), .WBADRI5out(WBADRI5_buf), .WBADRI4in(WBADRI4), 
    .WBADRI4out(WBADRI4_buf), .WBADRI3in(WBADRI3), .WBADRI3out(WBADRI3_buf), 
    .WBADRI2in(WBADRI2), .WBADRI2out(WBADRI2_buf), .WBADRI1in(WBADRI1), 
    .WBADRI1out(WBADRI1_buf), .WBADRI0in(WBADRI0), .WBADRI0out(WBADRI0_buf), 
    .WBDATI7in(WBDATI7), .WBDATI7out(WBDATI7_buf), .WBDATI6in(WBDATI6), 
    .WBDATI6out(WBDATI6_buf), .WBDATI5in(WBDATI5), .WBDATI5out(WBDATI5_buf), 
    .WBDATI4in(WBDATI4), .WBDATI4out(WBDATI4_buf), .WBDATI3in(WBDATI3), 
    .WBDATI3out(WBDATI3_buf), .WBDATI2in(WBDATI2), .WBDATI2out(WBDATI2_buf), 
    .WBDATI1in(WBDATI1), .WBDATI1out(WBDATI1_buf), .WBDATI0in(WBDATI0), 
    .WBDATI0out(WBDATI0_buf), .PLL0DATI7in(PLL0DATI7), 
    .PLL0DATI7out(PLL0DATI7_buf), .PLL0DATI6in(PLL0DATI6), 
    .PLL0DATI6out(PLL0DATI6_buf), .PLL0DATI5in(PLL0DATI5), 
    .PLL0DATI5out(PLL0DATI5_buf), .PLL0DATI4in(PLL0DATI4), 
    .PLL0DATI4out(PLL0DATI4_buf), .PLL0DATI3in(PLL0DATI3), 
    .PLL0DATI3out(PLL0DATI3_buf), .PLL0DATI2in(PLL0DATI2), 
    .PLL0DATI2out(PLL0DATI2_buf), .PLL0DATI1in(PLL0DATI1), 
    .PLL0DATI1out(PLL0DATI1_buf), .PLL0DATI0in(PLL0DATI0), 
    .PLL0DATI0out(PLL0DATI0_buf), .PLL0ACKIin(PLL0ACKI), 
    .PLL0ACKIout(PLL0ACKI_buf), .PLL1DATI7in(PLL1DATI7), 
    .PLL1DATI7out(PLL1DATI7_buf), .PLL1DATI6in(PLL1DATI6), 
    .PLL1DATI6out(PLL1DATI6_buf), .PLL1DATI5in(PLL1DATI5), 
    .PLL1DATI5out(PLL1DATI5_buf), .PLL1DATI4in(PLL1DATI4), 
    .PLL1DATI4out(PLL1DATI4_buf), .PLL1DATI3in(PLL1DATI3), 
    .PLL1DATI3out(PLL1DATI3_buf), .PLL1DATI2in(PLL1DATI2), 
    .PLL1DATI2out(PLL1DATI2_buf), .PLL1DATI1in(PLL1DATI1), 
    .PLL1DATI1out(PLL1DATI1_buf), .PLL1DATI0in(PLL1DATI0), 
    .PLL1DATI0out(PLL1DATI0_buf), .PLL1ACKIin(PLL1ACKI), 
    .PLL1ACKIout(PLL1ACKI_buf), .I2C1SCLIin(I2C1SCLI), 
    .I2C1SCLIout(I2C1SCLI_buf), .I2C1SDAIin(I2C1SDAI), 
    .I2C1SDAIout(I2C1SDAI_buf), .I2C2SCLIin(I2C2SCLI), 
    .I2C2SCLIout(I2C2SCLI_buf), .I2C2SDAIin(I2C2SDAI), 
    .I2C2SDAIout(I2C2SDAI_buf), .SPISCKIin(SPISCKI), .SPISCKIout(SPISCKI_buf), 
    .SPIMISOIin(SPIMISOI), .SPIMISOIout(SPIMISOI_buf), .SPIMOSIIin(SPIMOSII), 
    .SPIMOSIIout(SPIMOSII_buf), .SPISCSNin(SPISCSN), .SPISCSNout(SPISCSN_buf), 
    .TCCLKIin(TCCLKI), .TCCLKIout(TCCLKI_buf), .TCRSTNin(TCRSTN), 
    .TCRSTNout(TCRSTN_buf), .TCICin(TCIC), .TCICout(TCIC_buf), .UFMSNin(UFMSN), 
    .UFMSNout(UFMSN_buf), .WBDATO7out(WBDATO7), .WBDATO7in(WBDATO7_buf), 
    .WBDATO6out(WBDATO6), .WBDATO6in(WBDATO6_buf), .WBDATO5out(WBDATO5), 
    .WBDATO5in(WBDATO5_buf), .WBDATO4out(WBDATO4), .WBDATO4in(WBDATO4_buf), 
    .WBDATO3out(WBDATO3), .WBDATO3in(WBDATO3_buf), .WBDATO2out(WBDATO2), 
    .WBDATO2in(WBDATO2_buf), .WBDATO1out(WBDATO1), .WBDATO1in(WBDATO1_buf), 
    .WBDATO0out(WBDATO0), .WBDATO0in(WBDATO0_buf), .WBACKOout(WBACKO), 
    .WBACKOin(WBACKO_buf), .PLLCLKOout(PLLCLKO), .PLLCLKOin(PLLCLKO_buf), 
    .PLLRSTOout(PLLRSTO), .PLLRSTOin(PLLRSTO_buf), .PLL0STBOout(PLL0STBO), 
    .PLL0STBOin(PLL0STBO_buf), .PLL1STBOout(PLL1STBO), 
    .PLL1STBOin(PLL1STBO_buf), .PLLWEOout(PLLWEO), .PLLWEOin(PLLWEO_buf), 
    .PLLADRO4out(PLLADRO4), .PLLADRO4in(PLLADRO4_buf), .PLLADRO3out(PLLADRO3), 
    .PLLADRO3in(PLLADRO3_buf), .PLLADRO2out(PLLADRO2), 
    .PLLADRO2in(PLLADRO2_buf), .PLLADRO1out(PLLADRO1), 
    .PLLADRO1in(PLLADRO1_buf), .PLLADRO0out(PLLADRO0), 
    .PLLADRO0in(PLLADRO0_buf), .PLLDATO7out(PLLDATO7), 
    .PLLDATO7in(PLLDATO7_buf), .PLLDATO6out(PLLDATO6), 
    .PLLDATO6in(PLLDATO6_buf), .PLLDATO5out(PLLDATO5), 
    .PLLDATO5in(PLLDATO5_buf), .PLLDATO4out(PLLDATO4), 
    .PLLDATO4in(PLLDATO4_buf), .PLLDATO3out(PLLDATO3), 
    .PLLDATO3in(PLLDATO3_buf), .PLLDATO2out(PLLDATO2), 
    .PLLDATO2in(PLLDATO2_buf), .PLLDATO1out(PLLDATO1), 
    .PLLDATO1in(PLLDATO1_buf), .PLLDATO0out(PLLDATO0), 
    .PLLDATO0in(PLLDATO0_buf), .I2C1SCLOout(I2C1SCLO), 
    .I2C1SCLOin(I2C1SCLO_buf), .I2C1SCLOENout(I2C1SCLOEN), 
    .I2C1SCLOENin(I2C1SCLOEN_buf), .I2C1SDAOout(I2C1SDAO), 
    .I2C1SDAOin(I2C1SDAO_buf), .I2C1SDAOENout(I2C1SDAOEN), 
    .I2C1SDAOENin(I2C1SDAOEN_buf), .I2C2SCLOout(I2C2SCLO), 
    .I2C2SCLOin(I2C2SCLO_buf), .I2C2SCLOENout(I2C2SCLOEN), 
    .I2C2SCLOENin(I2C2SCLOEN_buf), .I2C2SDAOout(I2C2SDAO), 
    .I2C2SDAOin(I2C2SDAO_buf), .I2C2SDAOENout(I2C2SDAOEN), 
    .I2C2SDAOENin(I2C2SDAOEN_buf), .I2C1IRQOout(I2C1IRQO), 
    .I2C1IRQOin(I2C1IRQO_buf), .I2C2IRQOout(I2C2IRQO), 
    .I2C2IRQOin(I2C2IRQO_buf), .SPISCKOout(SPISCKO), .SPISCKOin(SPISCKO_buf), 
    .SPISCKENout(SPISCKEN), .SPISCKENin(SPISCKEN_buf), .SPIMISOOout(SPIMISOO), 
    .SPIMISOOin(SPIMISOO_buf), .SPIMISOENout(SPIMISOEN), 
    .SPIMISOENin(SPIMISOEN_buf), .SPIMOSIOout(SPIMOSIO), 
    .SPIMOSIOin(SPIMOSIO_buf), .SPIMOSIENout(SPIMOSIEN), 
    .SPIMOSIENin(SPIMOSIEN_buf), .SPIMCSN0out(SPIMCSN0), 
    .SPIMCSN0in(SPIMCSN0_buf), .SPIMCSN1out(SPIMCSN1), 
    .SPIMCSN1in(SPIMCSN1_buf), .SPIMCSN2out(SPIMCSN2), 
    .SPIMCSN2in(SPIMCSN2_buf), .SPIMCSN3out(SPIMCSN3), 
    .SPIMCSN3in(SPIMCSN3_buf), .SPIMCSN4out(SPIMCSN4), 
    .SPIMCSN4in(SPIMCSN4_buf), .SPIMCSN5out(SPIMCSN5), 
    .SPIMCSN5in(SPIMCSN5_buf), .SPIMCSN6out(SPIMCSN6), 
    .SPIMCSN6in(SPIMCSN6_buf), .SPIMCSN7out(SPIMCSN7), 
    .SPIMCSN7in(SPIMCSN7_buf), .SPICSNENout(SPICSNEN), 
    .SPICSNENin(SPICSNEN_buf), .SPIIRQOout(SPIIRQO), .SPIIRQOin(SPIIRQO_buf), 
    .TCINTout(TCINT), .TCINTin(TCINT_buf), .TCOCout(TCOC), .TCOCin(TCOC_buf), 
    .WBCUFMIRQout(WBCUFMIRQ), .WBCUFMIRQin(WBCUFMIRQ_buf), 
    .CFGWAKEout(CFGWAKE), .CFGWAKEin(CFGWAKE_buf), .CFGSTDBYout(CFGSTDBY), 
    .CFGSTDBYin(CFGSTDBY_buf));
endmodule

module EFB_Buffer_Block ( input WBCLKIin, output WBCLKIout, input WBRSTIin, 
    output WBRSTIout, input WBCYCIin, output WBCYCIout, input WBSTBIin, 
    output WBSTBIout, input WBWEIin, output WBWEIout, input WBADRI7in, output 
    WBADRI7out, input WBADRI6in, output WBADRI6out, input WBADRI5in, output 
    WBADRI5out, input WBADRI4in, output WBADRI4out, input WBADRI3in, output 
    WBADRI3out, input WBADRI2in, output WBADRI2out, input WBADRI1in, output 
    WBADRI1out, input WBADRI0in, output WBADRI0out, input WBDATI7in, output 
    WBDATI7out, input WBDATI6in, output WBDATI6out, input WBDATI5in, output 
    WBDATI5out, input WBDATI4in, output WBDATI4out, input WBDATI3in, output 
    WBDATI3out, input WBDATI2in, output WBDATI2out, input WBDATI1in, output 
    WBDATI1out, input WBDATI0in, output WBDATI0out, input PLL0DATI7in, output 
    PLL0DATI7out, input PLL0DATI6in, output PLL0DATI6out, input PLL0DATI5in, 
    output PLL0DATI5out, input PLL0DATI4in, output PLL0DATI4out, input 
    PLL0DATI3in, output PLL0DATI3out, input PLL0DATI2in, output PLL0DATI2out, 
    input PLL0DATI1in, output PLL0DATI1out, input PLL0DATI0in, output 
    PLL0DATI0out, input PLL0ACKIin, output PLL0ACKIout, input PLL1DATI7in, 
    output PLL1DATI7out, input PLL1DATI6in, output PLL1DATI6out, input 
    PLL1DATI5in, output PLL1DATI5out, input PLL1DATI4in, output PLL1DATI4out, 
    input PLL1DATI3in, output PLL1DATI3out, input PLL1DATI2in, output 
    PLL1DATI2out, input PLL1DATI1in, output PLL1DATI1out, input PLL1DATI0in, 
    output PLL1DATI0out, input PLL1ACKIin, output PLL1ACKIout, input 
    I2C1SCLIin, output I2C1SCLIout, input I2C1SDAIin, output I2C1SDAIout, 
    input I2C2SCLIin, output I2C2SCLIout, input I2C2SDAIin, output I2C2SDAIout, 
    input SPISCKIin, output SPISCKIout, input SPIMISOIin, output SPIMISOIout, 
    input SPIMOSIIin, output SPIMOSIIout, input SPISCSNin, output SPISCSNout, 
    input TCCLKIin, output TCCLKIout, input TCRSTNin, output TCRSTNout, input 
    TCICin, output TCICout, input UFMSNin, output UFMSNout, WBDATO7out, input 
    WBDATO7in, output WBDATO6out, input WBDATO6in, output WBDATO5out, input 
    WBDATO5in, output WBDATO4out, input WBDATO4in, output WBDATO3out, input 
    WBDATO3in, output WBDATO2out, input WBDATO2in, output WBDATO1out, input 
    WBDATO1in, output WBDATO0out, input WBDATO0in, output WBACKOout, input 
    WBACKOin, output PLLCLKOout, input PLLCLKOin, output PLLRSTOout, input 
    PLLRSTOin, output PLL0STBOout, input PLL0STBOin, output PLL1STBOout, 
    input PLL1STBOin, output PLLWEOout, input PLLWEOin, output PLLADRO4out, 
    input PLLADRO4in, output PLLADRO3out, input PLLADRO3in, output PLLADRO2out, 
    input PLLADRO2in, output PLLADRO1out, input PLLADRO1in, output PLLADRO0out, 
    input PLLADRO0in, output PLLDATO7out, input PLLDATO7in, output PLLDATO6out, 
    input PLLDATO6in, output PLLDATO5out, input PLLDATO5in, output PLLDATO4out, 
    input PLLDATO4in, output PLLDATO3out, input PLLDATO3in, output PLLDATO2out, 
    input PLLDATO2in, output PLLDATO1out, input PLLDATO1in, output PLLDATO0out, 
    input PLLDATO0in, output I2C1SCLOout, input I2C1SCLOin, output 
    I2C1SCLOENout, input I2C1SCLOENin, output I2C1SDAOout, input I2C1SDAOin, 
    output I2C1SDAOENout, input I2C1SDAOENin, output I2C2SCLOout, input 
    I2C2SCLOin, output I2C2SCLOENout, input I2C2SCLOENin, output I2C2SDAOout, 
    input I2C2SDAOin, output I2C2SDAOENout, input I2C2SDAOENin, output 
    I2C1IRQOout, input I2C1IRQOin, output I2C2IRQOout, input I2C2IRQOin, 
    output SPISCKOout, input SPISCKOin, output SPISCKENout, input SPISCKENin, 
    output SPIMISOOout, input SPIMISOOin, output SPIMISOENout, input 
    SPIMISOENin, output SPIMOSIOout, input SPIMOSIOin, output SPIMOSIENout, 
    input SPIMOSIENin, output SPIMCSN0out, input SPIMCSN0in, output 
    SPIMCSN1out, input SPIMCSN1in, output SPIMCSN2out, input SPIMCSN2in, 
    output SPIMCSN3out, input SPIMCSN3in, output SPIMCSN4out, input SPIMCSN4in, 
    output SPIMCSN5out, input SPIMCSN5in, output SPIMCSN6out, input SPIMCSN6in, 
    output SPIMCSN7out, input SPIMCSN7in, output SPICSNENout, input SPICSNENin, 
    output SPIIRQOout, input SPIIRQOin, output TCINTout, input TCINTin, 
    output TCOCout, input TCOCin, output WBCUFMIRQout, input WBCUFMIRQin, 
    output CFGWAKEout, input CFGWAKEin, output CFGSTDBYout, input CFGSTDBYin );
  wire   WBRSTIin_dly, WBCLKIin_dly, WBCYCIin_dly, WBSTBIin_dly, WBWEIin_dly, 
         WBADRI0in_dly, WBADRI2in_dly, WBADRI6in_dly, WBDATI1in_dly, 
         WBDATI2in_dly, WBDATI3in_dly, WBDATI4in_dly, WBDATI6in_dly, 
         WBDATI7in_dly, I2C1SDAIin_dly, I2C1SCLIin_dly;

  BUFBA WBCLKI_buf( .A(WBCLKIin_dly), .Z(WBCLKIout));
  BUFBA WBRSTI_buf( .A(WBRSTIin_dly), .Z(WBRSTIout));
  BUFBA WBCYCI_buf( .A(WBCYCIin_dly), .Z(WBCYCIout));
  BUFBA WBSTBI_buf( .A(WBSTBIin_dly), .Z(WBSTBIout));
  BUFBA WBWEI_buf( .A(WBWEIin_dly), .Z(WBWEIout));
  BUFBA WBADRI7_buf( .A(WBADRI7in), .Z(WBADRI7out));
  BUFBA WBADRI6_buf( .A(WBADRI6in_dly), .Z(WBADRI6out));
  BUFBA WBADRI5_buf( .A(WBADRI5in), .Z(WBADRI5out));
  BUFBA WBADRI4_buf( .A(WBADRI4in), .Z(WBADRI4out));
  BUFBA WBADRI3_buf( .A(WBADRI3in), .Z(WBADRI3out));
  BUFBA WBADRI2_buf( .A(WBADRI2in_dly), .Z(WBADRI2out));
  BUFBA WBADRI1_buf( .A(WBADRI1in), .Z(WBADRI1out));
  BUFBA WBADRI0_buf( .A(WBADRI0in_dly), .Z(WBADRI0out));
  BUFBA WBDATI7_buf( .A(WBDATI7in_dly), .Z(WBDATI7out));
  BUFBA WBDATI6_buf( .A(WBDATI6in_dly), .Z(WBDATI6out));
  BUFBA WBDATI5_buf( .A(WBDATI5in), .Z(WBDATI5out));
  BUFBA WBDATI4_buf( .A(WBDATI4in_dly), .Z(WBDATI4out));
  BUFBA WBDATI3_buf( .A(WBDATI3in_dly), .Z(WBDATI3out));
  BUFBA WBDATI2_buf( .A(WBDATI2in_dly), .Z(WBDATI2out));
  BUFBA WBDATI1_buf( .A(WBDATI1in_dly), .Z(WBDATI1out));
  BUFBA WBDATI0_buf( .A(WBDATI0in), .Z(WBDATI0out));
  BUFBA PLL0DATI7_buf( .A(PLL0DATI7in), .Z(PLL0DATI7out));
  BUFBA PLL0DATI6_buf( .A(PLL0DATI6in), .Z(PLL0DATI6out));
  BUFBA PLL0DATI5_buf( .A(PLL0DATI5in), .Z(PLL0DATI5out));
  BUFBA PLL0DATI4_buf( .A(PLL0DATI4in), .Z(PLL0DATI4out));
  BUFBA PLL0DATI3_buf( .A(PLL0DATI3in), .Z(PLL0DATI3out));
  BUFBA PLL0DATI2_buf( .A(PLL0DATI2in), .Z(PLL0DATI2out));
  BUFBA PLL0DATI1_buf( .A(PLL0DATI1in), .Z(PLL0DATI1out));
  BUFBA PLL0DATI0_buf( .A(PLL0DATI0in), .Z(PLL0DATI0out));
  BUFBA PLL0ACKI_buf( .A(PLL0ACKIin), .Z(PLL0ACKIout));
  BUFBA PLL1DATI7_buf( .A(PLL1DATI7in), .Z(PLL1DATI7out));
  BUFBA PLL1DATI6_buf( .A(PLL1DATI6in), .Z(PLL1DATI6out));
  BUFBA PLL1DATI5_buf( .A(PLL1DATI5in), .Z(PLL1DATI5out));
  BUFBA PLL1DATI4_buf( .A(PLL1DATI4in), .Z(PLL1DATI4out));
  BUFBA PLL1DATI3_buf( .A(PLL1DATI3in), .Z(PLL1DATI3out));
  BUFBA PLL1DATI2_buf( .A(PLL1DATI2in), .Z(PLL1DATI2out));
  BUFBA PLL1DATI1_buf( .A(PLL1DATI1in), .Z(PLL1DATI1out));
  BUFBA PLL1DATI0_buf( .A(PLL1DATI0in), .Z(PLL1DATI0out));
  BUFBA PLL1ACKI_buf( .A(PLL1ACKIin), .Z(PLL1ACKIout));
  BUFBA I2C1SCLI_buf( .A(I2C1SCLIin_dly), .Z(I2C1SCLIout));
  BUFBA I2C1SDAI_buf( .A(I2C1SDAIin_dly), .Z(I2C1SDAIout));
  BUFBA I2C2SCLI_buf( .A(I2C2SCLIin), .Z(I2C2SCLIout));
  BUFBA I2C2SDAI_buf( .A(I2C2SDAIin), .Z(I2C2SDAIout));
  BUFBA SPISCKI_buf( .A(SPISCKIin), .Z(SPISCKIout));
  BUFBA SPIMISOI_buf( .A(SPIMISOIin), .Z(SPIMISOIout));
  BUFBA SPIMOSII_buf( .A(SPIMOSIIin), .Z(SPIMOSIIout));
  BUFBA SPISCSN_buf( .A(SPISCSNin), .Z(SPISCSNout));
  BUFBA TCCLKI_buf( .A(TCCLKIin), .Z(TCCLKIout));
  BUFBA TCRSTN_buf( .A(TCRSTNin), .Z(TCRSTNout));
  BUFBA TCIC_buf( .A(TCICin), .Z(TCICout));
  BUFBA UFMSN_buf( .A(UFMSNin), .Z(UFMSNout));
  BUFBA WBDATO7_buf( .A(WBDATO7in), .Z(WBDATO7out));
  BUFBA WBDATO6_buf( .A(WBDATO6in), .Z(WBDATO6out));
  BUFBA WBDATO5_buf( .A(WBDATO5in), .Z(WBDATO5out));
  BUFBA WBDATO4_buf( .A(WBDATO4in), .Z(WBDATO4out));
  BUFBA WBDATO3_buf( .A(WBDATO3in), .Z(WBDATO3out));
  BUFBA WBDATO2_buf( .A(WBDATO2in), .Z(WBDATO2out));
  BUFBA WBDATO1_buf( .A(WBDATO1in), .Z(WBDATO1out));
  BUFBA WBDATO0_buf( .A(WBDATO0in), .Z(WBDATO0out));
  BUFBA WBACKO_buf( .A(WBACKOin), .Z(WBACKOout));
  BUFBA PLLCLKO_buf( .A(PLLCLKOin), .Z(PLLCLKOout));
  BUFBA PLLRSTO_buf( .A(PLLRSTOin), .Z(PLLRSTOout));
  BUFBA PLL0STBO_buf( .A(PLL0STBOin), .Z(PLL0STBOout));
  BUFBA PLL1STBO_buf( .A(PLL1STBOin), .Z(PLL1STBOout));
  BUFBA PLLWEO_buf( .A(PLLWEOin), .Z(PLLWEOout));
  BUFBA PLLADRO4_buf( .A(PLLADRO4in), .Z(PLLADRO4out));
  BUFBA PLLADRO3_buf( .A(PLLADRO3in), .Z(PLLADRO3out));
  BUFBA PLLADRO2_buf( .A(PLLADRO2in), .Z(PLLADRO2out));
  BUFBA PLLADRO1_buf( .A(PLLADRO1in), .Z(PLLADRO1out));
  BUFBA PLLADRO0_buf( .A(PLLADRO0in), .Z(PLLADRO0out));
  BUFBA PLLDATO7_buf( .A(PLLDATO7in), .Z(PLLDATO7out));
  BUFBA PLLDATO6_buf( .A(PLLDATO6in), .Z(PLLDATO6out));
  BUFBA PLLDATO5_buf( .A(PLLDATO5in), .Z(PLLDATO5out));
  BUFBA PLLDATO4_buf( .A(PLLDATO4in), .Z(PLLDATO4out));
  BUFBA PLLDATO3_buf( .A(PLLDATO3in), .Z(PLLDATO3out));
  BUFBA PLLDATO2_buf( .A(PLLDATO2in), .Z(PLLDATO2out));
  BUFBA PLLDATO1_buf( .A(PLLDATO1in), .Z(PLLDATO1out));
  BUFBA PLLDATO0_buf( .A(PLLDATO0in), .Z(PLLDATO0out));
  BUFBA I2C1SCLO_buf( .A(I2C1SCLOin), .Z(I2C1SCLOout));
  BUFBA I2C1SCLOEN_buf( .A(I2C1SCLOENin), .Z(I2C1SCLOENout));
  BUFBA I2C1SDAO_buf( .A(I2C1SDAOin), .Z(I2C1SDAOout));
  BUFBA I2C1SDAOEN_buf( .A(I2C1SDAOENin), .Z(I2C1SDAOENout));
  BUFBA I2C2SCLO_buf( .A(I2C2SCLOin), .Z(I2C2SCLOout));
  BUFBA I2C2SCLOEN_buf( .A(I2C2SCLOENin), .Z(I2C2SCLOENout));
  BUFBA I2C2SDAO_buf( .A(I2C2SDAOin), .Z(I2C2SDAOout));
  BUFBA I2C2SDAOEN_buf( .A(I2C2SDAOENin), .Z(I2C2SDAOENout));
  BUFBA I2C1IRQO_buf( .A(I2C1IRQOin), .Z(I2C1IRQOout));
  BUFBA I2C2IRQO_buf( .A(I2C2IRQOin), .Z(I2C2IRQOout));
  BUFBA SPISCKO_buf( .A(SPISCKOin), .Z(SPISCKOout));
  BUFBA SPISCKEN_buf( .A(SPISCKENin), .Z(SPISCKENout));
  BUFBA SPIMISOO_buf( .A(SPIMISOOin), .Z(SPIMISOOout));
  BUFBA SPIMISOEN_buf( .A(SPIMISOENin), .Z(SPIMISOENout));
  BUFBA SPIMOSIO_buf( .A(SPIMOSIOin), .Z(SPIMOSIOout));
  BUFBA SPIMOSIEN_buf( .A(SPIMOSIENin), .Z(SPIMOSIENout));
  BUFBA SPIMCSN0_buf( .A(SPIMCSN0in), .Z(SPIMCSN0out));
  BUFBA SPIMCSN1_buf( .A(SPIMCSN1in), .Z(SPIMCSN1out));
  BUFBA SPIMCSN2_buf( .A(SPIMCSN2in), .Z(SPIMCSN2out));
  BUFBA SPIMCSN3_buf( .A(SPIMCSN3in), .Z(SPIMCSN3out));
  BUFBA SPIMCSN4_buf( .A(SPIMCSN4in), .Z(SPIMCSN4out));
  BUFBA SPIMCSN5_buf( .A(SPIMCSN5in), .Z(SPIMCSN5out));
  BUFBA SPIMCSN6_buf( .A(SPIMCSN6in), .Z(SPIMCSN6out));
  BUFBA SPIMCSN7_buf( .A(SPIMCSN7in), .Z(SPIMCSN7out));
  BUFBA SPICSNEN_buf( .A(SPICSNENin), .Z(SPICSNENout));
  BUFBA SPIIRQO_buf( .A(SPIIRQOin), .Z(SPIIRQOout));
  BUFBA TCINT_buf( .A(TCINTin), .Z(TCINTout));
  BUFBA TCOC_buf( .A(TCOCin), .Z(TCOCout));
  BUFBA WBCUFMIRQ_buf( .A(WBCUFMIRQin), .Z(WBCUFMIRQout));
  BUFBA CFGWAKE_buf( .A(CFGWAKEin), .Z(CFGWAKEout));
  BUFBA CFGSTDBY_buf( .A(CFGSTDBYin), .Z(CFGSTDBYout));

  specify
    (WBCLKIin => WBACKOout) = (0:0:0,0:0:0);
    (I2C1SCLOin => I2C1SDAOENout) = (0:0:0,0:0:0);
    (I2C1SCLOin => I2C1SDAOout) = (0:0:0,0:0:0);
    (I2C1SCLOin => I2C1SCLOENout) = (0:0:0,0:0:0);
    (I2C1SCLIin => I2C1SDAOENout) = (0:0:0,0:0:0);
    (I2C1SCLIin => I2C1SDAOout) = (0:0:0,0:0:0);
    $setuphold 
      (posedge WBCLKIin, WBRSTIin, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBRSTIin_dly);
    $setuphold 
      (posedge WBCLKIin, WBCYCIin, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBCYCIin_dly);
    $setuphold 
      (posedge WBCLKIin, WBSTBIin, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBSTBIin_dly);
    $setuphold 
      (posedge WBCLKIin, WBWEIin, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBWEIin_dly);
    $setuphold 
      (posedge WBCLKIin, WBADRI0in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBADRI0in_dly);
    $setuphold 
      (posedge WBCLKIin, WBADRI2in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBADRI2in_dly);
    $setuphold 
      (posedge WBCLKIin, WBADRI6in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBADRI6in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI1in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI1in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI2in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI2in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI3in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI3in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI4in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI4in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI6in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI6in_dly);
    $setuphold 
      (posedge WBCLKIin, WBDATI7in, 0:0:0, 0:0:0,,,, WBCLKIin_dly, WBDATI7in_dly);
    $setuphold 
      (posedge I2C1SCLIin, I2C1SDAIin, 0:0:0, 0:0:0,,,, I2C1SCLIin_dly, I2C1SDAIin_dly);
    $width (posedge WBCLKIin, 0:0:0);
    $width (negedge WBCLKIin, 0:0:0);
    $width (posedge I2C1SCLOin, 0:0:0);
    $width (negedge I2C1SCLOin, 0:0:0);
    $width (posedge I2C1SCLIin, 0:0:0);
    $width (negedge I2C1SCLIin, 0:0:0);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
